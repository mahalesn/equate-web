:root {
  --bg: #111;
  --fg: #fff;
  --muted: #a0a0a0;
  --tile: #1f1f1f;
  --line: #555;
  --num: #333;
  --op: #0a84ff;
  --util: #3a3a3a;
  --ok: #34c759;
  --err: #ff453a;
  --accent: #0a84ff;
  --gap: 20px;
  --slot-min: 200px;
  --digitKey: #1d1d1d; /* ≈ #333 at 35% over #111 */
  --digitText: #9a9a9a; /* default digit text */
}
* {
  box-sizing: border-box;
}
html,
body,
#root {
  height: 100%;
}
body {
  margin: 0;
  font-family:
    ui-sans-serif,
    -apple-system,
    Segoe UI,
    Roboto,
    Helvetica,
    Arial;
  background: var(--bg);
  color: var(--fg);
  display: flex;
  flex-direction: column;
  align-items: center;
}
/* Header + main padding should match so right edges align */
header {
  width: 100%;
  max-width: 560px;
  padding: 18px 16px 10px 16px; /* match main’s side padding */
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 12px;
  position: relative;
}
.brand {
  font-weight: 900;
  letter-spacing: 0.02em;
  font-size: 30px;
  text-align: center;
  margin-bottom: 2px;
}
/* Center digits; make room so the button doesn't overlap */

/* Keep digits centered; reserve space so the button doesn’t overlap them */
/* Three-column grid: [flex] [center content] [flex/right-aligned refresh] */
.puzzle {
  width: 100%;
  display: grid;
  grid-template-columns: 1fr auto 1fr; /* center column auto-sized */
  align-items: center;
  margin-bottom: 16px;
}

/* The digits sit in the middle column, perfectly centered */
.puzzle-center {
  grid-column: 2;
  justify-self: center;
  display: flex;
  align-items: baseline;
  gap: 10px;
  font-size: 22px;
  letter-spacing: 0.2rem;
}

/* Refresh lives in the right column, flush to the edge */
.puzzle > .refresh {
  grid-column: 3;
  justify-self: end;
}
/*.puzzle{ display:flex; align-items:baseline; gap:10px; font-size:22px; letter-spacing:.2rem; justify-content:center; margin-bottom:16px; } */
.with {
  font-family: ui-serif, Georgia, 'Times New Roman', serif;
  font-style: italic;
  color: var(--muted);
  letter-spacing: 0.06em;
  position: relative;
}
.with::before,
.with::after {
  content: '·';
  margin: 0 0.35rem;
  opacity: 0.7;
}

/* Main layout */
main {
  width: 100%;
  max-width: 560px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 22px;
  padding: 6px 16px 24px;
  position: relative;
}
.results,
.slots {
  width: 100%;
  display: grid;
  grid-template-columns: repeat(2, minmax(var(--slot-min), 1fr));
  gap: var(--gap);
  align-items: center;
  justify-items: stretch;
  position: relative;
}

/* Plain result values (no boxes) */
.resVal {
  font-size: 16px;
  color: var(--muted);
  text-align: center;
}
.resVal.ok {
  color: var(--ok);
  font-weight: 700;
}
.resVal.err {
  color: var(--err);
  font-weight: 600;
}

/* Expression slots */
.slot {
  width: 100%;
  min-height: 64px;
  background: var(--tile);
  border: 2px solid var(--line);
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 10px 14px;
  font-size: 20px;
  transition:
    border-color 0.15s,
    box-shadow 0.15s;
  position: relative;
}
.slot.selected {
  border-color: var(--accent);
  box-shadow: 0 0 0 4px rgba(10, 132, 255, 0.15);
}
.slot .placeholder {
  color: var(--muted);
}

/* '=' centered between expression boxes */
.slots .exprEq {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  font-size: 22px;
  pointer-events: none;
  font-weight: bold;
  transition: color 0.3s ease;
  z-index: 1;
}

.slots .exprEq.neutral {
  color: var(--muted);
}

.slots .exprEq.not-equal {
  color: var(--err);
}

.slots .exprEq.equal {
  color: var(--ok);
}

/* Green glow animation when expressions match */
.slots.matched .slot {
  animation: successGlow 1.5s ease-out;
}

@keyframes successGlow {
  0% {
    box-shadow: 0 0 0 rgba(52, 199, 89, 0);
    border-color: var(--line);
  }
  30% {
    box-shadow: 0 0 20px rgba(52, 199, 89, 0.6), 0 0 40px rgba(52, 199, 89, 0.3);
    border-color: var(--ok);
  }
  70% {
    box-shadow: 0 0 15px rgba(52, 199, 89, 0.4), 0 0 30px rgba(52, 199, 89, 0.2);
    border-color: var(--ok);
  }
  100% {
    box-shadow: 0 0 0 rgba(52, 199, 89, 0);
    border-color: var(--line);
  }
}

/* Refresh icon positioned at right edge of the Right Expression box */
/*
.refresh{ width:34px; height:34px; border-radius:50%; border:1px solid var(--line);
  background:#1b1b1b; color:#fff; display:flex; align-items:center; justify-content:center;
  cursor:pointer; font-size:18px; line-height:1; }
.refresh:hover{ border-color:#777 }
.refreshSlots{ position:absolute; right:0; top:8px; } */ /* right-aligned to right slot edge */

/* Keypad */
.pad {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 12px;
  margin-top: 2px;
  width: 100%;
  max-width: 528px;
}
.btn {
  height: 56px;
  border: none;
  border-radius: 12px;
  font-size: 20px;
  color: #fff;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  user-select: none;
}

/* All digits share the same solid background */
.btn.num {
  background: var(--digitKey);
  color: var(--digitText);
  font-weight: 600;
}

/* Allowed digits pop (blue background) */
.btn.num.allowed {
  color: white;
  background: var(--op);
  font-weight: 700;
}

/* Do NOT dim number keys when disabled — keep the same background */
.btn.num[disabled] {
  opacity: 0.35; /* cancel global dimming */
  filter: none;
  cursor: not-allowed;
}

.btn.op {
  background: var(--tile);
  border: 2px solid var(--op);
  color: white;
}
.btn.util {
  background: var(--util);
}


@media (max-width: 500px) {
  .pad {
    grid-template-columns: repeat(4, 1fr);
    gap: 10px;
    max-width: calc(100vw - 32px);
  }
  .btn {
    height: 48px;
    font-size: 18px;
  }
  :root {
    --slot-min: 160px;
  }
}
