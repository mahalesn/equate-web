name: Seed issues from JSON
on:
workflow_dispatch:
permissions:
contents: read
issues: write
jobs:
seed:
runs-on: ubuntu-latest
steps:
- name: Checkout
uses: actions/checkout@v4
- name: Read project-seed.json and create labels/milestones/issues
uses: actions/github-script@v7
with:
script: |
const fs = require('fs');
const path = '.github/project-seed.json';
if (!fs.existsSync(path)) {
core.setFailed('Missing .github/project-seed.json');
return;
}
const seed = JSON.parse(fs.readFileSync(path, 'utf8'));
const owner = context.repo.owner;
const repo = context.repo.repo;
async function ensureLabel(name, color, description) {
try {
await github.rest.issues.getLabel({ owner, repo, name });
color, description });
} catch (e) {
if (e.status === 404) {
await github.rest.issues.createLabel({ owner, repo, name,
} else {
throw e;
}
}
}
async function ensureMilestone(title, description, state='open')
const { data: milestones } = await
github.rest.issues.listMilestones({ owner, repo, state: 'all', per_page:
{
100 });
const found = milestones.find(m => m.title === title);
if (found) return found.number;
const { data: created } = await
github.rest.issues.createMilestone({ owner, repo, title, state,
description });
return created.number;
}
if (Array.isArray(seed.labels)) {
for (const lbl of seed.labels) {
core.info(`Ensuring label: ${lbl.name}`);
await ensureLabel(lbl.name, lbl.color || 'ededed',
lbl.description || '');
}
}
const milestoneMap = {};
if (Array.isArray(seed.milestones)) {
for (const ms of seed.milestones) {
core.info(`Ensuring milestone: ${ms.title}`);
milestoneMap[ms.title] = await ensureMilestone(ms.title,
ms.description || '', ms.state || 'open');
}
}
let existingIssues = [];
let page = 1;
while (true) {
const { data } = await github.rest.issues.listForRepo({
owner, repo, state: 'all', per_page: 100, page
});
if (!data.length) break;
existingIssues.push(...data);
page += 1;
}
const existingTitles = new Set(existingIssues.map(i => i.title));
if (Array.isArray(seed.issues)) {
for (const it of seed.issues) {
if (existingTitles.has(it.title)) {
core.info(`Skipping existing issue: ${it.title}`);
continue;
}
const milestoneNumber = it.milestone ?
milestoneMap[it.milestone] : undefined;
core.info(`Creating issue: ${it.title}`);
await github.rest.issues.create({
owner, repo,
title: it.title,
body: it.body || '',
labels: it.labels || [],
milestone: milestoneNumber
});
}
}